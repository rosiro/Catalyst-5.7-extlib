.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Meta::Attribute::Native 3"
.TH Moose::Meta::Attribute::Native 3 "2011-08-24" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Moose::Meta::Attribute::Native \- Delegate to native Perl types
.SH "VERSION"
.IX Header "VERSION"
version 2.0203
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyClass;
\&  use Moose;
.Ve
.PP
.Vb 13
\&  has 'mapping' => (
\&      traits  => ['Hash'],
\&      is      => 'rw',
\&      isa     => 'HashRef[Str]',
\&      default => sub { {} },
\&      handles => {
\&          exists_in_mapping => 'exists',
\&          ids_in_mapping    => 'keys',
\&          get_mapping       => 'get',
\&          set_mapping       => 'set',
\&          set_quantity      => [ set => 'quantity' ],
\&      },
\&  );
.Ve
.PP
.Vb 5
\&  my $obj = MyClass->new;
\&  $obj->set_quantity(10);      # quantity => 10
\&  $obj->set_mapping('foo', 4); # foo => 4
\&  $obj->set_mapping('bar', 5); # bar => 5
\&  $obj->set_mapping('baz', 6); # baz => 6
.Ve
.PP
.Vb 2
\&  # prints 5
\&  print $obj->get_mapping('bar') if $obj->exists_in_mapping('bar');
.Ve
.PP
.Vb 2
\&  # prints 'quantity, foo, bar, baz'
\&  print join ', ', $obj->ids_in_mapping;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Native delegations allow you to delegate to native Perl data
structures as if they were objects. For example, in the \*(L"\s-1SYNOPSIS\s0\*(R" you can
see a hash reference being treated as if it has methods named \f(CW\*(C`exists()\*(C'\fR,
\&\f(CW\*(C`keys()\*(C'\fR, \f(CW\*(C`get()\*(C'\fR, and \f(CW\*(C`set()\*(C'\fR.
.PP
The delegation methods (mostly) map to Perl builtins and operators. The return
values of these delegations should be the same as the corresponding Perl
operation. Any deviations will be explicitly documented.
.SH "API"
.IX Header "API"
Native delegations are enabled by passing certain options to \f(CW\*(C`has\*(C'\fR when
creating an attribute.
.Sh "traits"
.IX Subsection "traits"
To enable this feature, pass the appropriate name in the \f(CW\*(C`traits\*(C'\fR array
reference for the attribute. For example, to enable this feature for hash
reference, we include \f(CW\(aqHash\(aq\fR in the list of traits.
.Sh "isa"
.IX Subsection "isa"
You will need to make sure that the attribute has an appropriate type. For
example, to use this with a Hash you must specify that your attribute is some
sort of \f(CW\*(C`HashRef\*(C'\fR.
.Sh "handles"
.IX Subsection "handles"
This is just like any other delegation, but only a hash reference is allowed
when defining native delegations. The keys are the methods to be created in
the class which contains the attribute. The values are the methods provided by
the associated trait. Currying works the same way as it does with any other
delegation.
.PP
See the docs for each native trait for details on what methods are available.
.Sh "is"
.IX Subsection "is"
Some traits provide a default \f(CW\*(C`is\*(C'\fR for historical reasons. This behavior is
deprecated, and you are strongly encouraged to provide a value. If you don't
plan to read and write the attribute value directly, not passing the \f(CW\*(C`is\*(C'\fR
option will prevent standard accessor generation.
.Sh "default or builder"
.IX Subsection "default or builder"
Some traits provide a default \f(CW\*(C`default\*(C'\fR for historical reasons. This behavior
is deprecated, and you are strongly encouraged to provide a default value or
make the attribute required.
.SH "TRAITS FOR NATIVE DELEGATIONS"
.IX Header "TRAITS FOR NATIVE DELEGATIONS"
.IP "Array" 4
.IX Item "Array"
.Vb 11
\&    has 'queue' => (
\&        traits  => ['Array'],
\&        is      => 'ro',
\&        isa     => 'ArrayRef[Str]',
\&        default => sub { [] },
\&        handles => {
\&            add_item  => 'push',
\&            next_item => 'shift',
\&            # ...
\&        }
\&    );
.Ve
.IP "Bool" 4
.IX Item "Bool"
.Vb 13
\&    has 'is_lit' => (
\&        traits  => ['Bool'],
\&        is      => 'ro',
\&        isa     => 'Bool',
\&        default => 0,
\&        handles => {
\&            illuminate  => 'set',
\&            darken      => 'unset',
\&            flip_switch => 'toggle',
\&            is_dark     => 'not',
\&            # ...
\&        }
\&    );
.Ve
.IP "Code" 4
.IX Item "Code"
.Vb 12
\&    has 'callback' => (
\&        traits  => ['Code'],
\&        is      => 'ro',
\&        isa     => 'CodeRef',
\&        default => sub {
\&            sub {'called'}
\&        },
\&        handles => {
\&            call => 'execute',
\&            # ...
\&        }
\&    );
.Ve
.IP "Counter" 4
.IX Item "Counter"
.Vb 12
\&    has 'counter' => (
\&        traits  => ['Counter'],
\&        is      => 'ro',
\&        isa     => 'Num',
\&        default => 0,
\&        handles => {
\&            inc_counter   => 'inc',
\&            dec_counter   => 'dec',
\&            reset_counter => 'reset',
\&            # ...
\&        }
\&    );
.Ve
.IP "Hash" 4
.IX Item "Hash"
.Vb 12
\&    has 'options' => (
\&        traits  => ['Hash'],
\&        is      => 'ro',
\&        isa     => 'HashRef[Str]',
\&        default => sub { {} },
\&        handles => {
\&            set_option => 'set',
\&            get_option => 'get',
\&            has_option => 'exists',
\&            # ...
\&        }
\&    );
.Ve
.IP "Number" 4
.IX Item "Number"
.Vb 16
\&    has 'integer' => (
\&        traits  => ['Number'],
\&        is      => 'ro',
\&        isa     => 'Int',
\&        default => 5,
\&        handles => {
\&            set => 'set',
\&            add => 'add',
\&            sub => 'sub',
\&            mul => 'mul',
\&            div => 'div',
\&            mod => 'mod',
\&            abs => 'abs',
\&            # ...
\&        }
\&    );
.Ve
.IP "String" 4
.IX Item "String"
.Vb 11
\&    has 'text' => (
\&        traits  => ['String'],
\&        is      => 'ro',
\&        isa     => 'Str',
\&        default => q{},
\&        handles => {
\&            add_text     => 'append',
\&            replace_text => 'replace',
\&            # ...
\&        }
\&    );
.Ve
.SH "COMPATIBILITY WITH MooseX::AttributeHelpers"
.IX Header "COMPATIBILITY WITH MooseX::AttributeHelpers"
This feature used to be a separated \s-1CPAN\s0 distribution called
MooseX::AttributeHelpers.
.PP
When the feature was incorporated into the Moose core, some of the \s-1API\s0 details
were changed. The underlying capabilities are the same, but some details of
the \s-1API\s0 were changed.
.SH "BUGS"
.IX Header "BUGS"
See \*(L"\s-1BUGS\s0\*(R" in Moose for details on reporting bugs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
