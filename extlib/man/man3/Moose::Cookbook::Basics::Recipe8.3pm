.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Basics::Recipe8 3"
.TH Moose::Cookbook::Basics::Recipe8 3 "2011-08-24" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Moose::Cookbook::Basics::Recipe8 \- Builder methods and lazy_build
.SH "VERSION"
.IX Header "VERSION"
version 2.0203
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package BinaryTree;
\&  use Moose;
.Ve
.PP
.Vb 1
\&  has 'node' => (is => 'rw', isa => 'Any');
.Ve
.PP
.Vb 6
\&  has 'parent' => (
\&      is        => 'rw',
\&      isa       => 'BinaryTree',
\&      predicate => 'has_parent',
\&      weak_ref  => 1,
\&  );
.Ve
.PP
.Vb 7
\&  has 'left' => (
\&      is        => 'rw',
\&      isa       => 'BinaryTree',
\&      predicate => 'has_left',
\&      lazy      => 1,
\&      builder   => '_build_child_tree',
\&  );
.Ve
.PP
.Vb 7
\&  has 'right' => (
\&      is        => 'rw',
\&      isa       => 'BinaryTree',
\&      predicate => 'has_right',
\&      lazy      => 1,
\&      builder   => '_build_child_tree',
\&  );
.Ve
.PP
.Vb 4
\&  before 'right', 'left' => sub {
\&      my ($self, $tree) = @_;
\&      $tree->parent($self) if defined $tree;
\&  };
.Ve
.PP
.Vb 2
\&  sub _build_child_tree {
\&      my $self = shift;
.Ve
.PP
.Vb 2
\&      return BinaryTree->new( parent => $self );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you've already read Moose::Cookbook::Basics::Recipe3, then this
example should look very familiar. In fact, all we've done here is
replace the attribute's \f(CW\*(C`default\*(C'\fR parameter with a \f(CW\*(C`builder\*(C'\fR.
.PP
In this particular case, the \f(CW\*(C`default\*(C'\fR and \f(CW\*(C`builder\*(C'\fR options act in
exactly the same way. When the \f(CW\*(C`left\*(C'\fR or \f(CW\*(C`right\*(C'\fR attribute is read,
Moose calls the builder method to initialize the attribute.
.PP
Note that Moose calls the builder method \fIon the object which has the
attribute\fR. Here's an example:
.PP
.Vb 1
\&  my $tree = BinaryTree->new();
.Ve
.PP
.Vb 1
\&  my $left = $tree->left();
.Ve
.PP
When \f(CW\*(C`$tree\->left()\*(C'\fR is called, Moose calls \f(CW\*(C`$tree\->_build_child_tree()\*(C'\fR in order to populate the \f(CW\*(C`left\*(C'\fR
attribute. If we had passed \f(CW\*(C`left\*(C'\fR to the original constructor, the
builder would not be called.
.PP
There are some differences between \f(CW\*(C`default\*(C'\fR and \f(CW\*(C`builder\*(C'\fR. Notably,
a builder is subclassable, and can be composed from a role. See
Moose::Manual::Attributes for more details.
.Sh "The lazy_build shortcut"
.IX Subsection "The lazy_build shortcut"
The \f(CW\*(C`lazy_build\*(C'\fR attribute option can be used as sugar to specify
a whole set of attribute options at once:
.PP
.Vb 5
\&  has 'animal' => (
\&      is         => 'ro',
\&      isa        => 'Animal',
\&      lazy_build => 1,
\&  );
.Ve
.PP
This is a shorthand for:
.PP
.Vb 9
\&  has 'animal' => (
\&      is        => 'ro',
\&      isa       => 'Animal',
\&      required  => 1,
\&      lazy      => 1,
\&      builder   => '_build_animal',
\&      predicate => 'has_animal',
\&      clearer   => 'clear_animal',
\&  );
.Ve
.PP
If your attribute starts with an underscore, Moose is smart and will
do the right thing with the \f(CW\*(C`predicate\*(C'\fR and \f(CW\*(C`clearer\*(C'\fR, making them
both start with an underscore. The \f(CW\*(C`builder\*(C'\fR method \fIalways\fR starts
with an underscore.
.PP
You can read more about \f(CW\*(C`lazy_build\*(C'\fR in Moose::Meta::Attribute
.SH "CONCLUSION"
.IX Header "CONCLUSION"
The \f(CW\*(C`builder\*(C'\fR option is a more OO-friendly version of the \f(CW\*(C`default\*(C'\fR
functionality. It also separates the default-generating code into a
well-defined method. Sprinkling your attribute definitions with
anonymous subroutines can be quite ugly and hard to follow.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
