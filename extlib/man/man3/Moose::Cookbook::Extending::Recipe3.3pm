.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Extending::Recipe3 3"
.TH Moose::Cookbook::Extending::Recipe3 3 "2011-08-24" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Moose::Cookbook::Extending::Recipe3 \- Providing an alternate base object class
.SH "VERSION"
.IX Header "VERSION"
version 2.0203
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package MyApp::Base;
\&  use Moose;
.Ve
.PP
.Vb 1
\&  extends 'Moose::Object';
.Ve
.PP
.Vb 1
\&  before 'new' => sub { warn "Making a new " . $_[0] };
.Ve
.PP
.Vb 1
\&  no Moose;
.Ve
.PP
.Vb 3
\&  package MyApp::UseMyBase;
\&  use Moose ();
\&  use Moose::Exporter;
.Ve
.PP
.Vb 1
\&  Moose::Exporter->setup_import_methods( also => 'Moose' );
.Ve
.PP
.Vb 4
\&  sub init_meta {
\&      shift;
\&      return Moose->init_meta( @_, base_class => 'MyApp::Base' );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A common extension is to provide an alternate base class. One way to
do that is to make a \f(CW\*(C`MyApp::base\*(C'\fR and add \f(CW\*(C`extends\ 'MyApp::Base'\*(C'\fR to every class in your application. That's pretty
tedious. Instead, you can create a Moose-alike module that sets the
base object class to \f(CW\*(C`MyApp::Base\*(C'\fR for you.
.PP
Then, instead of writing \f(CW\*(C`use\ Moose\*(C'\fR you can write \f(CW\*(C`use\ MyApp::UseMyBase\*(C'\fR.
.PP
In this particular example, our base class issues some debugging
output every time a new object is created, but you can think of some
more interesting things to do with your own base class.
.PP
This uses the magic of Moose::Exporter. When we call \f(CW\*(C`Moose::Exporter\->setup_import_methods( also => \(aqMoose\(aq )\*(C'\fR it builds
\&\f(CW\*(C`import\*(C'\fR and \f(CW\*(C`unimport\*(C'\fR methods for you. The \f(CW\*(C`also => \(aqMoose\(aq\*(C'\fR
bit says that we want to export everything that Moose does.
.PP
The \f(CW\*(C`import\*(C'\fR method that gets created will call our \f(CW\*(C`init_meta\*(C'\fR
method, passing it \f(CW\*(C`for_caller => $caller\*(C'\fR as its
arguments. The \f(CW$caller\fR is set to the class that actually imported
us in the first place.
.PP
See the Moose::Exporter docs for more details on its \s-1API\s0.
.SH "USING MyApp::UseMyBase"
.IX Header "USING MyApp::UseMyBase"
To actually use our new base class, we simply use \f(CW\*(C`MyApp::UseMyBase\*(C'\fR
\&\fIinstead\fR of \f(CW\*(C`Moose\*(C'\fR. We get all the Moose sugar plus our new base
class.
.PP
.Vb 1
\&  package Foo;
.Ve
.PP
.Vb 1
\&  use MyApp::UseMyBase;
.Ve
.PP
.Vb 1
\&  has 'size' => ( is => 'rw' );
.Ve
.PP
.Vb 1
\&  no MyApp::UseMyBase;
.Ve
.SH "CONCLUSION"
.IX Header "CONCLUSION"
This is an awful lot of magic for a simple base class. You will often
want to combine a metaclass trait with a base class extension, and
that's when this technique is useful.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
